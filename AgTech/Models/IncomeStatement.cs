// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var incomeStatementResultModel = IncomeStatementResultModel.FromJson(jsonString);

using System.ComponentModel;
using AgTech.Utility;

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class IncomeStatementResultModel
    {
        [JsonProperty("status")]
        public string Status { get; set; }

        [JsonProperty("info")]
        public Info Info { get; set; }

        [JsonProperty("data")]
        public Datum[] Data { get; set; }
    }

    public partial class Datum
    {
        [JsonProperty("year")]
        public long Year { get; set; }

        [JsonProperty("state")]
        public State State { get; set; }

        [JsonProperty("report")]
        public Report Report { get; set; }

        [JsonProperty("farmtype")]
        public Farmtype Farmtype { get; set; }

        [JsonProperty("category")]
        public Category Category { get; set; }

        [JsonProperty("category_value")]
        public CategoryValue CategoryValue { get; set; }

        [JsonProperty("category2")]
        public Category2 Category2 { get; set; }

        [JsonProperty("category2_value")]
        public Category2Value Category2Value { get; set; }

        [JsonProperty("variable_id")]
        public string VariableId { get; set; }

        [JsonProperty("variable_name")]
        public string VariableName { get; set; }

        [JsonProperty("variable_sequence")]
        public long VariableSequence { get; set; }

        [JsonProperty("variable_level")]
        public long VariableLevel { get; set; }

        [JsonProperty("variable_group")]
        public object VariableGroup { get; set; }

        [JsonProperty("variable_group_id")]
        public object VariableGroupId { get; set; }

        [JsonProperty("variable_unit")]
        public VariableUnit VariableUnit { get; set; }

        [JsonProperty("variable_description")]
        public string VariableDescription { get; set; }

        [JsonProperty("variable_is_invalid")]
        public bool VariableIsInvalid { get; set; }

        [JsonProperty("estimate")]
        public long Estimate { get; set; }

        [JsonProperty("median")]
        public long? Median { get; set; }

        [JsonProperty("statistic")]
        public Category2Value Statistic { get; set; }

        [JsonProperty("rse")]
        public double Rse { get; set; }

        [JsonProperty("unreliable_estimate")]
        public long UnreliableEstimate { get; set; }

        [JsonProperty("decimal_display")]
        public long DecimalDisplay { get; set; }
    }

    public partial class Info
    {
        [JsonProperty("timing")]
        public Timing Timing { get; set; }

        [JsonProperty("result_coverage")]
        public string ResultCoverage { get; set; }

        [JsonProperty("total")]
        public Total Total { get; set; }
    }

    public partial class Timing
    {
        [JsonProperty("executing")]
        public long Executing { get; set; }

        [JsonProperty("unit")]
        public string Unit { get; set; }
    }

    public partial class Total
    {
        [JsonProperty("record_count")]
        public long RecordCount { get; set; }
    }

    public enum Category { CollapsedFarmTypology };

    public enum Category2 { AllFarms };

    public enum Category2Value { Mean, Total };

    public enum CategoryValue { CommercialFarms };

    public enum Farmtype { FarmOperatorHouseholds };

    public enum Report { FarmBusinessIncomeStatement };

    public enum State
    {
        [Description("Alabama")]
        AL,
        [Description("Alaska")]
        AK,
        [Description("Arkansas")]
        AR,
        [Description("Arizona")]
        AZ,
        [Description("California")]
        CA,
        [Description("Colorado")]
        CO,
        [Description("Connecticut")]
        CT,
        [Description("D.C.")]
        DC,
        [Description("Delaware")]
        DE,
        [Description("Florida")]
        FL,
        [Description("Georgia")]
        GA,
        [Description("Hawaii")]
        HI,
        [Description("Iowa")]
        IA,
        [Description("Idaho")]
        ID,
        [Description("Illinois")]
        IL,
        [Description("Indiana")]
        IN,
        [Description("Kansas")]
        KS,
        [Description("Kentucky")]
        KY,
        [Description("Louisiana")]
        LA,
        [Description("Massachusetts")]
        MA,
        [Description("Maryland")]
        MD,
        [Description("Maine")]
        ME,
        [Description("Michigan")]
        MI,
        [Description("Minnesota")]
        MN,
        [Description("Missouri")]
        MO,
        [Description("Mississippi")]
        MS,
        [Description("Montana")]
        MT,
        [Description("North Carolina")]
        NC,
        [Description("North Dakota")]
        ND,
        [Description("Nebraska")]
        NE,
        [Description("New Hampshire")]
        NH,
        [Description("New Jersey")]
        NJ,
        [Description("New Mexico")]
        NM,
        [Description("Nevada")]
        NV,
        [Description("New York")]
        NY,
        [Description("Oklahoma")]
        OK,
        [Description("Ohio")]
        OH,
        [Description("Oregon")]
        OR,
        [Description("Pennsylvania")]
        PA,
        [Description("Rhode Island")]
        RI,
        [Description("South Carolina")]
        SC,
        [Description("South Dakota")]
        SD,
        [Description("Tennessee")]
        TN,
        [Description("Texas")]
        TX,
        [Description("Utah")]
        UT,
        [Description("Virginia")]
        VA,
        [Description("Vermont")]
        VT,
        [Description("Washington")]
        WA,
        [Description("Wisconsin")]
        WI,
        [Description("West Virginia")]
        WV,
        [Description("Wyoming")]
        WY
    };

    public enum VariableUnit { DollarsPerFarm, Number };

    public partial class IncomeStatementResultModel
    {
        public static IncomeStatementResultModel FromJson(string json) => JsonConvert.DeserializeObject<IncomeStatementResultModel>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this IncomeStatementResultModel self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            NullValueHandling = NullValueHandling.Ignore,
            Converters =
            {
                CategoryConverter.Singleton,
                Category2Converter.Singleton,
                Category2ValueConverter.Singleton,
                CategoryValueConverter.Singleton,
                FarmtypeConverter.Singleton,
                ReportConverter.Singleton,
                StateConverter.Singleton,
                VariableUnitConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class CategoryConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Category) || t == typeof(Category?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "Collapsed Farm Typology")
            {
                return Category.CollapsedFarmTypology;
            }
            throw new Exception("Cannot unmarshal type Category");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Category)untypedValue;
            if (value == Category.CollapsedFarmTypology)
            {
                serializer.Serialize(writer, "Collapsed Farm Typology");
                return;
            }
            throw new Exception("Cannot marshal type Category");
        }

        public static readonly CategoryConverter Singleton = new CategoryConverter();
    }

    internal class Category2Converter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Category2) || t == typeof(Category2?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "All Farms")
            {
                return Category2.AllFarms;
            }
            throw new Exception("Cannot unmarshal type Category2");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Category2)untypedValue;
            if (value == Category2.AllFarms)
            {
                serializer.Serialize(writer, "All Farms");
                return;
            }
            throw new Exception("Cannot marshal type Category2");
        }

        public static readonly Category2Converter Singleton = new Category2Converter();
    }

    internal class Category2ValueConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Category2Value) || t == typeof(Category2Value?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "MEAN":
                    return Category2Value.Mean;
                case "TOTAL":
                    return Category2Value.Total;
            }
            throw new Exception("Cannot unmarshal type Category2Value");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Category2Value)untypedValue;
            switch (value)
            {
                case Category2Value.Mean:
                    serializer.Serialize(writer, "MEAN");
                    return;
                case Category2Value.Total:
                    serializer.Serialize(writer, "TOTAL");
                    return;
            }
            throw new Exception("Cannot marshal type Category2Value");
        }

        public static readonly Category2ValueConverter Singleton = new Category2ValueConverter();
    }

    internal class CategoryValueConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(CategoryValue) || t == typeof(CategoryValue?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "Commercial farms")
            {
                return CategoryValue.CommercialFarms;
            }
            throw new Exception("Cannot unmarshal type CategoryValue");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (CategoryValue)untypedValue;
            if (value == CategoryValue.CommercialFarms)
            {
                serializer.Serialize(writer, "Commercial farms");
                return;
            }
            throw new Exception("Cannot marshal type CategoryValue");
        }

        public static readonly CategoryValueConverter Singleton = new CategoryValueConverter();
    }

    internal class FarmtypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Farmtype) || t == typeof(Farmtype?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "Farm Operator Households")
            {
                return Farmtype.FarmOperatorHouseholds;
            }
            throw new Exception("Cannot unmarshal type Farmtype");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Farmtype)untypedValue;
            if (value == Farmtype.FarmOperatorHouseholds)
            {
                serializer.Serialize(writer, "Farm Operator Households");
                return;
            }
            throw new Exception("Cannot marshal type Farmtype");
        }

        public static readonly FarmtypeConverter Singleton = new FarmtypeConverter();
    }

    internal class ReportConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Report) || t == typeof(Report?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "Farm Business Income Statement")
            {
                return Report.FarmBusinessIncomeStatement;
            }
            throw new Exception("Cannot unmarshal type Report");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Report)untypedValue;
            if (value == Report.FarmBusinessIncomeStatement)
            {
                serializer.Serialize(writer, "Farm Business Income Statement");
                return;
            }
            throw new Exception("Cannot marshal type Report");
        }

        public static readonly ReportConverter Singleton = new ReportConverter();
    }

    internal class StateConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(State) || t == typeof(State?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            /*if (value == "Texas")
            {
                return State.TX;
            }*/

            return EnumEx.GetValueFromDescription<State>(value);
            throw new Exception("Cannot unmarshal type State");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (State)untypedValue;
            if (value == State.TX)
            {
                serializer.Serialize(writer, "Texas");
                return;
            }
            throw new Exception("Cannot marshal type State");
        }

        public static readonly StateConverter Singleton = new StateConverter();
    }

    internal class VariableUnitConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(VariableUnit) || t == typeof(VariableUnit?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Dollars per farm":
                    return VariableUnit.DollarsPerFarm;
                case "Number":
                    return VariableUnit.Number;
            }
            throw new Exception("Cannot unmarshal type VariableUnit");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (VariableUnit)untypedValue;
            switch (value)
            {
                case VariableUnit.DollarsPerFarm:
                    serializer.Serialize(writer, "Dollars per farm");
                    return;
                case VariableUnit.Number:
                    serializer.Serialize(writer, "Number");
                    return;
            }
            throw new Exception("Cannot marshal type VariableUnit");
        }

        public static readonly VariableUnitConverter Singleton = new VariableUnitConverter();
    }
}
